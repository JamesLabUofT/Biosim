---
title: "SpongyMoth"
format: html
editor: visual
---

------------------------------------------------------------------------

```{r}
#| echo: false
#| output: asis
today = Sys.Date()
year <- as.numeric(format(today, "%Y"))
cat(paste0("# Sampling dates generated ", today, "\n"))
```

```{r}
#| echo: false
#| output: false
install.packages("https://sourceforge.net/projects/repiceasource/files/latest/download", repos = NULL,  type="source")

install.packages("https://sourceforge.net/projects/biosimclient.mrnfforesttools.p/files/latest/download", repos = NULL,  type="source")
```

```{r}
#| echo: false
locations <- read.csv("SpongyMoth_updated_Summer2023.csv")
```

```{r}
#| echo: false
#| output: false
today = Sys.Date()
year <- as.numeric(format(today, "%Y"))
#BioSIM::biosimclient.config(forceClimateGenerationEnabled = TRUE)

output <- BioSIM::generateWeather("Gypsy_Moth_Seasonality", year-1, year, locations$KeyID, locations$Latitude, locations$Longitude);



#Clsoe Java client
BioSIM::shutdownClient()

```




```{r}
#| echo: false
# range of confidence intervals
CI = c(66,95,99)

# Load BioSIM data
# Make sure data is in multiple columns
# Make sure names matches
gm <- as.data.frame(output$Gypsy_Moth_Seasonality)

# Date when loop was run
#today = "7-6-22"

getDatesForLifestage <- function(lifestage){
  # Adjust restype (SBW = fir and spruce, GM = GM)
  restype = "GM"
  
  # Saving vector
  vec_dates = "resource site minmax CI dates"
  
  resource = gm
  resource$Name <- resource$KeyID
  
  # fir or spruce
  sites <- unique(resource$Name)
  
  
  
  # Subset each site
  
  for (m in 1: length(unique(resource$Name))){
    
    subsite <- subset(resource, Name == sites[m])
    subsite <- subset(subsite, subsite[,lifestage] != 0)
    subsite$date <-paste( subsite$Year,"-", subsite$Month,"-", subsite$Day, sep ="") 
    
    
    
    #### Build loop
    
    
    dates_sampling <- vector(mode = "list", length = length(sites))
    
    for (l in 1: length(subsite[,lifestage]) ) {
      subsite$sum [l] = sum(subsite[,lifestage][1:l])
    }
    
    
    min =c()
    max=c()
    for(i in 1:length(CI)){
      min[i] = sum(subsite[,lifestage])*(((100-CI[i])/2)/100)
      max[i] = sum(subsite[,lifestage])*((CI[i]+((100-CI[i])/2))/100) 
      
      
      for (j in 1: length(subsite[,lifestage])){
        if(subsite$sum[j] < min[i]){
          j =j+1
        }else{
          # print(paste(restype," ",subsite$Name[j]," min date CI",CI[i],": ",subsite$date[j], sep= ""))
          tempmin = paste(restype," ",subsite$Name[j]," min_date CI",CI[i]," ",subsite$date[j], sep= "")
          vec_dates = c(vec_dates, tempmin)
          break
        }
      } 
      
      for (k in 1: length(subsite[,lifestage])){
        if(subsite$sum[k] <= max[i]){
          k =k+1
        }else{
          #print(paste(restype," ",subsite$Name[k-1]," max date CI",CI[i],": ",subsite$date[k-1], sep= ""))
          tempmax = paste(restype," ",subsite$Name[k-1]," max_date CI",CI[i]," ",subsite$date[k-1], sep= "")
          vec_dates = c(vec_dates, tempmax)
          break
        }
      }
    }
  }
  tabledates = strsplit(vec_dates, split = " ")
  tabledates = as.data.frame(Reduce(rbind, tabledates))
  colnames(tabledates) = c("resource","site","minmax", "CI", "dates")
  rownames(tabledates) = 1:nrow(tabledates)
  write.csv(tabledates,paste("SpongyMoth_",lifestage,"_BioSIM_Summer_",year,"_dates_",today,".csv",sep=""))
  
  # Copy paste both outputs into a csv file (one after the other vertically) and add top line
  
  
  ###########################
  #                         #
  #     GM final tables     #
  #                         #
  ###########################
  
  #Before loading data separate columns in excel
  
  data <- read.csv(paste("SpongyMoth_",lifestage,"_BioSIM_Summer_",year,"_dates_",today,".csv",sep=""))
  data <- data[-1,-1]
  resourcetype = "GM"
  sites = unique(data$site)
  
  #Prepare output file
  final <- vector(mode = "list", length = length(resourcetype))
  
  
  
  for(i in 1:length(resourcetype)){
    resdata <- subset(data,resource == resourcetype[i])
    
    
    #CI66
    data66 <- subset(resdata, CI == "CI66")
    min_data66 <- subset(data66, minmax == "min_date")
    max_data66 <- subset(data66, minmax == "max_date")
    
    
    matrix66 <- data.frame(matrix(0, ncol = 4, nrow = length(unique(data$site))))
    colnames(matrix66) <- c("resource","site","min66","max66")
    
    for (j in 1: length(unique(data$site))){
      matrix66[j,1] <- data66$resource[j]
      matrix66[j,2] <- sites[j]
      matrix66[j,3] <- min_data66$dates[j]
      matrix66[j,4] <- max_data66$dates[j]
    }
    
    #CI95
    data95 <- subset(resdata, CI == "CI95")
    min_data95 <- subset(data95, minmax == "min_date")
    max_data95 <- subset(data95, minmax == "max_date")
    
    
    matrix95 <- data.frame(matrix(0, ncol = 4, nrow = length(unique(data$site))))
    colnames(matrix95) <- c("resource","site","min95","max95")
    
    for (k in 1: length(unique(data$site))){
      matrix95[k,1] <- data95$resource[k]
      matrix95[k,2] <- sites[k]
      matrix95[k,3] <- min_data95$dates[k]
      matrix95[k,4] <- max_data95$dates[k]
    }
    
    #CI99
    data99 <- subset(resdata, CI == "CI99")
    min_data99 <- subset(data99, minmax == "min_date")
    max_data99 <- subset(data99, minmax == "max_date")
    
    
    matrix99 <- data.frame(matrix(0, ncol = 4, nrow = length(unique(data$site))))
    colnames(matrix99) <- c("resource","site","min99","max99")
    
    for (l in 1: length(unique(data$site))){
      matrix99[l,1] <- data99$resource[l]
      matrix99[l,2] <- sites[l]
      matrix99[l,3] <- min_data99$dates[l]
      matrix99[l,4] <- max_data99$dates[l]
    }
    final[[i]] <- cbind(matrix66,matrix95,matrix99)
  }
  
  tablefinal <- data.frame(Reduce(rbind, final))
  tablefinal <- tablefinal[,c("resource","site","min66","max66","min95","max95","min99","max99")]
  
  tablefinal$latitude <- locations$Latitude
  tablefinal$longitude <- locations$Longitude
  tablefinal$name <- locations$Name
  
  # save file
  #write.csv(tablefinal,paste("SpongyMoth_",lifestage,"_BioSIM_Summer_",year,"_Sampling_dates_",today,".csv",sep=""))
  return(tablefinal)
}
```

## Pupae Spongy Moths

```{r}
#| echo: false
library(DT)
pupae_dt <- DT::datatable(data = getDatesForLifestage("Pupae"),
                          colnames = c("resource", "site", "min66",
                                       "max66", "min95", "max95",
                                       "min99", "max99", "latitude",
                                       "longitude", "name"),
                          filter = "top",
                          extensions = c("Buttons", "ColReorder"),
                           options = list(
                       # list 10 entries at once
                       pageLength = 10, 
                       # automatically size columns
                       autoWidth = TRUE,
                       # highlight entries that match search term
                       searchHighlight = TRUE,
                       # allow regular expressions and case insensitive searches
                       search = list(regex = TRUE, caseInsensitive = TRUE),
                       dom = "Bfrtip",
                       # buttons options
                       buttons = c("copy", "csv", "excel", "pdf", "print", "colvis"),
                       # links to extension call
                       colReorder = TRUE)
)
pupae_dt

```

## Adult Spongy Moths

```{r}
#| echo: false
library(DT)
adult_dt <- DT::datatable(data = getDatesForLifestage("Adult"),
                          colnames = c("resource", "site", "min66",
                                       "max66", "min95", "max95",
                                       "min99", "max99", "latitude",
                                       "longitude", "name"),
                          filter = "top",
                          extensions = c("Buttons", "ColReorder"),
                           options = list(
                       # list 10 entries at once
                       pageLength = 10, 
                       # automatically size columns
                       autoWidth = TRUE,
                       # highlight entries that match search term
                       searchHighlight = TRUE,
                       # allow regular expressions and case insensitive searches
                       search = list(regex = TRUE, caseInsensitive = TRUE),
                       dom = "Bfrtip",
                       # buttons options
                       buttons = c("copy", "csv", "excel", "pdf", "print", "colvis"),
                       # links to extension call
                       colReorder = TRUE)
)
adult_dt

```
